import numpy as np
from scipy.io import wavfile
from sklearn.decomposition import PCA
from python_speech_features import logfbank
import pickle
import keras
import matplotlib.pyplot as plt
import json


model_file = 'model/jm_split_a_08_model.h5'
model_weights = 'model/jm_split_a_08_weights_epoch_020.h5'
pca_model = 'model/pca_deforms_a.pkl'


TRI_A = [
    [21, 67, 66],
    [8, 3, 2],
    [116, 114, 115],
    [79, 112, 85],
    [67, 60, 66],
    [9, 72, 73],
    [73, 112, 79],
    [93, 85, 112],
    [23, 3, 22],
    [0, 1, 18],
    [83, 76, 82],
    [4, 78, 73],
    [65, 66, 59],
    [33, 112, 74],
    [1, 24, 18],
    [5, 3, 8],
    [23, 24, 2],
    [58, 64, 65],
    [57, 64, 58],
    [20, 23, 21],
    [30, 26, 25],
    [23, 20, 24],
    [70, 69, 26],
    [59, 58, 65],
    [10, 11, 30],
    [29, 28, 27],
    [12, 17, 14],
    [15, 14, 17],
    [14, 13, 12],
    [16, 15, 17],
    [81, 13, 14],
    [80, 85, 86],
    [110, 113, 114],
    [93, 34, 92],
    [111, 110, 114],
    [113, 115, 114],
    [100, 41, 99],
    [116, 115, 119],
    [113, 94, 100],
    [94, 93, 41],
    [93, 112, 34],
    [79, 16, 9],
    [93, 92, 39],
    [36, 37, 91],
    [90, 91, 32],
    [84, 87, 78],
    [18, 24, 19],
    [90, 35, 36],
    [37, 38, 91],
    [18, 19, 63],
    [64, 20, 65],
    [63, 64, 57],
    [19, 20, 64],
    [63, 19, 64],
    [24, 20, 19],
    [75, 76, 0],
    [75, 0, 71],
    [63, 57, 71],
    [8, 6, 5],
    [18, 63, 71],
    [77, 76, 83],
    [82, 76, 75],
    [77, 6, 7],
    [0, 7, 1],
    [76, 77, 7],
    [6, 8, 7],
    [2, 24, 1],
    [71, 0, 18],
    [76, 7, 0],
    [1, 8, 2],
    [1, 7, 8],
    [77, 78, 6],
    [33, 91, 38],
    [6, 78, 5],
    [77, 83, 84],
    [22, 4, 72],
    [5, 78, 4],
    [4, 73, 72],
    [87, 32, 33],
    [67, 22, 72],
    [21, 65, 20],
    [3, 23, 2],
    [22, 21, 23],
    [4, 3, 5],
    [4, 22, 3],
    [60, 59, 66],
    [68, 61, 60],
    [67, 21, 22],
    [66, 65, 21],
    [31, 67, 72],
    [68, 69, 61],
    [31, 30, 25],
    [26, 69, 25],
    [70, 105, 62],
    [68, 60, 67],
    [62, 61, 69],
    [25, 68, 67],
    [25, 69, 68],
    [106, 105, 70],
    [69, 70, 62],
    [30, 29, 26],
    [27, 106, 70],
    [108, 109, 107],
    [28, 107, 106],
    [26, 27, 70],
    [29, 13, 28],
    [10, 16, 17],
    [11, 29, 30],
    [26, 29, 27],
    [12, 13, 29],
    [27, 28, 106],
    [13, 108, 28],
    [106, 107, 105],
    [111, 114, 116],
    [28, 108, 107],
    [11, 12, 29],
    [11, 17, 12],
    [81, 108, 13],
    [81, 86, 110],
    [14, 80, 81],
    [79, 85, 80],
    [80, 15, 79],
    [17, 11, 10],
    [79, 15, 16],
    [80, 14, 15],
    [67, 31, 25],
    [72, 9, 31],
    [31, 10, 30],
    [31, 9, 10],
    [79, 9, 73],
    [16, 10, 9],
    [92, 38, 39],
    [92, 33, 38],
    [43, 98, 99],
    [40, 93, 39],
    [34, 112, 33],
    [73, 74, 112],
    [73, 78, 87],
    [34, 33, 92],
    [74, 87, 33],
    [80, 86, 81],
    [85, 94, 86],
    [108, 111, 109],
    [110, 86, 113],
    [108, 110, 111],
    [108, 81, 110],
    [100, 94, 41],
    [113, 86, 94],
    [41, 93, 40],
    [94, 85, 93],
    [98, 117, 99],
    [111, 116, 109],
    [115, 118, 119],
    [42, 43, 99],
    [99, 41, 42],
    [115, 100, 118],
    [115, 113, 100],
    [100, 99, 118],
    [117, 118, 99],
    [45, 97, 98],
    [98, 104, 117],
    [95, 96, 89],
    [98, 97, 104],
    [97, 46, 35],
    [97, 45, 46],
    [44, 45, 98],
    [43, 44, 98],
    [73, 87, 74],
    [78, 77, 84],
    [90, 32, 87],
    [91, 33, 32],
    [83, 89, 84],
    [90, 87, 84],
    [83, 88, 89],
    [36, 91, 90],
    [89, 90, 84],
    [88, 83, 82],
    [96, 35, 89],
    [95, 89, 88],
    [35, 90, 89],
    [102, 95, 101],
    [88, 82, 95],
    [97, 96, 103],
    [97, 35, 96],
    [97, 103, 104],
    [96, 102, 103],
    [96, 95, 102],
    [56, 35, 46],
    [55, 56, 46],
    [55, 46, 45],
    [54, 55, 45],
    [54, 45, 44],
    [53, 54, 44],
    [53, 44, 43],
    [52, 53, 43],
    [52, 43, 42],
    [41, 52, 42],
    [36, 35, 47],
    [37, 36, 47],
    [37, 47, 48],
    [38, 37, 48],
    [38, 48, 49],
    [39, 38, 49],
    [39, 49, 50],
    [40, 39, 50],
    [40, 50, 51],
    [41, 40, 51],
    [101, 95, 82]]

xmean = np.array([-10.37841939, -10.29596543, -9.52635941, -8.62898119,
                  -8.69664673, -8.21468825, -7.82792466, -7.63330412,
                  -7.16496604, -7.01107227, -7.13848479, -7.27367869,
                  -7.39360228, -7.80416838, -8.12128764, -8.38547911,
                  -8.61007819, -8.45082173, -8.26495103, -8.2375674,
                  -8.28130973, -8.35239667, -8.49759591, -8.69153259,
                  -8.74377098, -8.71080804, -8.70976421, -8.89688068,
                  -9.20472392, -9.14222207, -8.77120357, -8.60124022,
                  -8.64800577, -8.71983164, -9.03468397, -9.50371695,
                  -9.7947639, -9.87434974, -9.98449006, -10.2410216])


xscale = np.array([1.58813686, 1.83807591, 2.13763173, 2.6464941, 2.82898367,
                   2.95084312, 3.0551267, 3.2245095, 3.31486539, 3.40277908,
                   3.539413, 3.6050623, 3.62343044, 3.59356218, 3.54632535,
                   3.5146207, 3.46488724, 3.42945575, 3.40136951, 3.3930116,
                   3.33723809, 3.28875783, 3.2595026, 3.19884305, 3.18120324,
                   3.21133435, 3.19104206, 3.05393208, 2.89993749, 2.88674008,
                   2.97305169, 3.04128255, 3.09865122, 3.15371995, 3.17500542,
                   3.23045878, 3.30656913, 3.31711384, 3.27755814, 3.23892092])


ymean = np.array([-6.42464600e-05, 2.06111677e-05, 1.18896142e-04,
                  -5.87192199e-04, 1.39384340e-05, -9.03689058e-04,
                  -3.23345362e-04, 1.35912019e-03, -3.69690836e-03,
                  -2.11017749e-03, 7.85311141e-03, -1.00601867e-08,
                  -9.06127048e-11, -2.00905313e-08])


yscale = np.array([0.99999785, 0.9999983, 0.99999731, 0.99999767, 0.99999848,
                   0.99999795, 0.99999717, 0.99999662, 5.92231376, 2.68581913,
                   3.66035934, 2.53686941, 1.72943674, 5.64413309])


with open(pca_model, 'rb',) as fid:
    pca = pickle.load(fid, encoding='latin1')


def split_modes(Y):
    _pca = Y[0].squeeze() * yscale[:8] + ymean[:8]
    trxyz = Y[1].squeeze() * yscale[8:] + ymean[8:]
    deforms = pca.inverse_transform(_pca).reshape(-1, 120, 3)

    print(deforms.shape)
    rotations = trxyz[:, :3]
    rotations -= rotations.mean(0)
    translations = trxyz[:, 3:]
    return deforms, rotations, translations


kw = dict(
    samplerate=16000,
    winlen=2 / 59.94,
    winstep=1 / 59.94,
    nfilt=40,
    nfft=1024,
    lowfreq=0,
    highfreq=None,
    preemph=0.97)


def wav2predict(wav_fname):
    model = keras.models.load_model(model_file)
    model.load_weights(model_weights)
    fs, sig = wavfile.read(wav_fname)
    sig = sig.astype(np.float32) / sig.max()
    if fs != 16000:
        print('Wav file must be 16kHz')
        return
    print(fs, sig.shape)
    X = logfbank(sig, **kw).reshape(1, -1, 40)
    X = (X - xmean) / xscale
    Y = model.predict(X)
    deforms, rotations, translations = split_modes(Y)

    return deforms, rotations, translations


def plot(rotations, translations):
    labs = ['x', 'y', 'z']
    plt.figure()
    for i in range(3):
        plt.plot(rotations[:, i], label=labs[i])
        plt.title('rotation')
        plt.legend()
    plt.figure()
    for i in range(3):
        plt.plot(translations[:, i], label=labs[i])
        plt.title('translation')
        plt.legend()
    plt.show()


# -----------------------------------------------------------------------------
# make predictions from a wav file - scene_a_01_0184.wav
# -----------------------------------------------------------------------------

deforms, rotation, translation = wav2predict('wav/scene_a_01_0184.wav')

d = dict(deforms=deforms.tolist(),
         rotation=rotation.tolist(),
         translation=translation.tolist(),
         triangulation=TRI_A)

with open('scene_a_01_0184_pred.json', 'w') as fid:
    json.dump(d, fid)
